#!/bin/sh
# Init script for kibana
# Maintained by Pierig Le Saux
# Generated by pleaserun.
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          kibana4
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:       no description given
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

name=kibana4
<% if scope['kibana4::symlink'] -%>
program=<%= scope['kibana4::symlink_name'] %>/bin/kibana
<% else -%>
program=<%= scope['kibana4::install_dir'] %>/kibana-<%= scope['kibana4::package_ensure'] %>/bin/kibana
<% end -%>
args=''

<% if scope['kibana4::config'] and scope['kibana4::config'].has_key?('pid_file') -%>
pidfile=<%= scope['kibana4::config']['pid_file'] -%>
<% elsif scope['kibana4::config'] and scope['kibana4::config'].has_key?('pid.file') -%>
pidfile=<%= scope['kibana4::config']['pid.file'] -%>
<% else -%>
pidfile=/var/run/kibana.pid
<% end -%>

rundir=`dirname $pidfile`
if [ ! -d $rundir ]; then
  mkdir -p $rundir
<% if scope['kibana4::kibana4_user'] and scope['kibana4::kibana4_group'] -%>
  chown <%= scope['kibana4::kibana4_user'] %>:<%= scope['kibana4::kibana4_group'] %> $rundir
<% end -%>
fi

[ -r /etc/default/$name ] && . /etc/default/$name
[ -r /etc/sysconfig/$name ] && . /etc/sysconfig/$name

start() {

  # Run the program!
  chroot --userspec <%= scope['kibana4::kibana4_user'] %>:<%= scope['kibana4::kibana4_group'] %> / sh -c "
    cd /

    exec \"$program\" $args
  " > /var/log/kibana/$name.log 2> /var/log/kibana/$name.err &

  echo "$name started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=`cat "$pidfile"`
    echo "Killing $name (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      echo "Waiting $name (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      echo "$name stop failed; still running."
    else
      echo "$name stopped."
      rm -f $pidfile
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
    rm -f $pidfile
  fi
}


case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$name is already running"
    else
      start
    fi
    #exit $code
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "$name is running"
    else
      echo "$name is not running"
    fi
    exit $code
    ;;
  restart)

    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
